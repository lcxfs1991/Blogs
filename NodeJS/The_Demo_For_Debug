V8 comes with an extensive debugger which is accessible out-of-process via a simple TCP protocol. 
Node.js has a built-in client for this debugger. To use this, start Node.js with the debug argument; 
a prompt will appear:
#Node debug yourscript.js

Commands reference

Stepping
cont, c - Continue execution
next, n - Step next
step, s - Step in
out, o - Step out
pause - Pause running code (like pause button in Developer Tools)

Breakpoints
setBreakpoint(), sb() - Set breakpoint on current line
setBreakpoint(line), sb(line) - Set breakpoint on specific line
setBreakpoint('fn()'), sb(...) - Set breakpoint on a first statement in functions body
setBreakpoint('script.js', 1), sb(...) - Set breakpoint on first line of script.js
clearBreakpoint('script.js', 1), cb(...) - Clear breakpoint in script.js on line 1

Info
backtrace, bt - Print backtrace of current execution frame
list(5) - List scripts source code with 5 line context (5 lines before and after)
watch(expr) - Add expression to watch list
unwatch(expr) - Remove expression from watch list
watchers - List all watchers and their values (automatically listed on each breakpoint)
repl - Open debugger's repl for evaluation in debugging script's context

Execution control
run - Run script (automatically runs on debugger's start)
restart - Restart script
kill - Kill script

scripts - List all loaded scripts
version - Display v8's version